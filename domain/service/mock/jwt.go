// Code generated by MockGen. DO NOT EDIT.
// Source: ./jwt.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entity "github.com/yasszu/go-jwt-auth/domain/entity"
)

// MockJwt is a mock of Jwt interface.
type MockJwt struct {
	ctrl     *gomock.Controller
	recorder *MockJwtMockRecorder
}

// MockJwtMockRecorder is the mock recorder for MockJwt.
type MockJwtMockRecorder struct {
	mock *MockJwt
}

// NewMockJwt creates a new mock instance.
func NewMockJwt(ctrl *gomock.Controller) *MockJwt {
	mock := &MockJwt{ctrl: ctrl}
	mock.recorder = &MockJwtMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJwt) EXPECT() *MockJwtMockRecorder {
	return m.recorder
}

// Sign mocks base method.
func (m *MockJwt) Sign(account *entity.Account) (*entity.AccessToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sign", account)
	ret0, _ := ret[0].(*entity.AccessToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Sign indicates an expected call of Sign.
func (mr *MockJwtMockRecorder) Sign(account interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sign", reflect.TypeOf((*MockJwt)(nil).Sign), account)
}

// Verify mocks base method.
func (m *MockJwt) Verify(signedToken string) (uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Verify", signedToken)
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Verify indicates an expected call of Verify.
func (mr *MockJwtMockRecorder) Verify(signedToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Verify", reflect.TypeOf((*MockJwt)(nil).Verify), signedToken)
}
